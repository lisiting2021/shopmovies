<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zking.movie.mapper.UserMapper" >
  <resultMap id="BaseResultMap" type="com.zking.movie.model.User" >
    <constructor >
      <idArg column="user_id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="user_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="user_password" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="user_state" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="salt" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="role_id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="personal_id" jdbcType="BIGINT" javaType="java.lang.Long" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    user_id, user_name, user_password, user_state, salt, role_id, personal_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from user
    where user_id = #{userId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from user
    where user_id = #{userId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.zking.movie.model.User" >
    insert into user (user_id, user_name, user_password, 
      user_state, salt, role_id, 
      personal_id)
    values (#{userId,jdbcType=BIGINT}, #{userName,jdbcType=VARCHAR}, #{userPassword,jdbcType=VARCHAR}, 
      #{userState,jdbcType=INTEGER}, #{salt,jdbcType=VARCHAR}, #{roleId,jdbcType=BIGINT}, 
      #{personalId,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="com.zking.movie.model.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="userPassword != null" >
        user_password,
      </if>
      <if test="userState != null" >
        user_state,
      </if>
      <if test="salt != null" >
        salt,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="personalId != null" >
        personal_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userPassword != null" >
        #{userPassword,jdbcType=VARCHAR},
      </if>
      <if test="userState != null" >
        #{userState,jdbcType=INTEGER},
      </if>
      <if test="salt != null" >
        #{salt,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=BIGINT},
      </if>
      <if test="personalId != null" >
        #{personalId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zking.movie.model.User" >
    update user
    <set >
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userPassword != null" >
        user_password = #{userPassword,jdbcType=VARCHAR},
      </if>
      <if test="userState != null" >
        user_state = #{userState,jdbcType=INTEGER},
      </if>
      <if test="salt != null" >
        salt = #{salt,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=BIGINT},
      </if>
      <if test="personalId != null" >
        personal_id = #{personalId,jdbcType=BIGINT},
      </if>
    </set>
    where user_id = #{userId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zking.movie.model.User" >
    update user
    set user_name = #{userName,jdbcType=VARCHAR},
      user_password = #{userPassword,jdbcType=VARCHAR},
      user_state = #{userState,jdbcType=INTEGER},
      salt = #{salt,jdbcType=VARCHAR},
      role_id = #{roleId,jdbcType=BIGINT},
      personal_id = #{personalId,jdbcType=BIGINT}
    where user_id = #{userId,jdbcType=BIGINT}
  </update>
</mapper>